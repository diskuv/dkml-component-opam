name: opam Asset Distribution

on:
  workflow_dispatch:
    inputs:
      dkml-compiler:
        description: "Git branch, tag or commit for dkml-base-compiler, dkml-option-32bit, ocaml and ocaml-config"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      conf-dkml-cross-toolchain:
        description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
        required: false
        default: "" # Change this to "@repository@" once published to Opam
      diskuv-opam-repository:
        # Used by all_setup_opam_repositories.sh
        description: "Git branch, tag or commit for the diskuv-opam-repository repository"
        required: false
        default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG in setup-dkml is used as default for empty strings
  push:
    branches:
      # Any commit to the main branch
      - "main"
    tags:
      # Any push to a tag that starts with 'v'
      - v*

jobs:
  setup-dkml:
    uses: 'diskuv/dkml-workflows/.github/workflows/setup-dkml.yml@v0'
    permissions: {} # remove all rights of GITHUB_TOKEN when it is passed to setup-dkml.yml
    with:
      cache-prefix: v1r2
      ocaml-compiler: 4.12.1
      fdopen-opamexe-bootstrap: true # true = Use opam.exe from fdopen's site on Windows. Temporary mitigation until a transient bug is fixed.
      dkml-compiler: ${{ github.event.inputs.dkml-compiler }}
      conf-dkml-cross-toolchain: ${{ github.event.inputs.conf-dkml-cross-toolchain }}
      diskuv-opam-repository: ${{ github.event.inputs.diskuv-opam-repository }}

  build-dkml:
    needs: setup-dkml
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86
            dkml-host-abi: windows_x86
            default_shell: msys2 {0}
            opam-root: D:/.opam
            bits: "32"
          - os: windows-2019 # 2019 has Visual Studio 2019
            host_target_abis: win32-windows_x86_64
            dkml-host-abi: windows_x86_64
            default_shell: msys2 {0}
            opam-root: D:/.opam
            bits: "64"
          - os: macos-latest
            host_target_abis: macos-darwin_all
            dkml-host-abi: darwin_x86_64
            default_shell: sh
            opam-root: /Users/runner/.opam
            bits: "64"
          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86
            bits: "32"
            default_shell: sh
            dkml-host-abi: linux_x86
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
          - os: ubuntu-latest
            host_target_abis: manylinux2014-linux_x86_64
            bits: "64"
            default_shell: sh
            dkml-host-abi: linux_x86_64
            opam-root: .ci/opamroot # local directory of $GITHUB_WORKSPACE so available to dockcross
    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.host_target_abis }}
    defaults:
      run:
        shell: ${{ matrix.default_shell }}
    env:
      OPAMROOT: ${{ matrix.opam-root }}
      COMPONENT: dkml-component-staging-opam${{ matrix.bits }}
      # Force recompilation rather than download the asset
      DKML_BUST_CACHE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          path: .ci/dist

      - name: Install MSYS2 (Windows)
        if: startsWith(matrix.dkml-host-abi, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          update: true
          # 1. xz is not for OCaml; just to get opam64.tar.xz from fdopen
          # 2. For Opam 2.0 from fdopen we need MSYS2/Cygwin tar that can handle
          #    Unix paths like /tmp.
          install: >-
            tree
            wget
            make
            pkg-config
            rsync
            diffutils
            patch
            unzip
            git
            xz
            tar

      - name: Import build environments from setup-dkml
        run: |
          ${{ needs.setup-dkml.outputs.import_func }}
          import ${{ matrix.host_target_abis }}

      - name: Cache Opam downloads by host
        uses: actions/cache@v2
        with:
          path: ${{ matrix.opam-root }}/download-cache
          key: ${{ matrix.dkml-host-abi }}

      - name: Add Opam pins until published in Opam and possibly fdopen repositories
        run: .github/workflows/scripts/pin-unix-asset.sh

      - name: Install component
        run: |
          #!/bin/sh
          set -euf

          # Weirdly Opam 2.0.10 (from fdopen) does not install uucd for uucp
          # even though it is a test dependency of uucp. Then uucp fails to
          # build.
          opamrun install uucd --yes

          ec=0
          if ! opamrun install ./$COMPONENT.opam --with-test --yes; then
            tail -n10000 "${{ matrix.opam-root }}"/log/dkml-component-*.out
            ec=1
          fi

          # Diagnostics
          set -x
          b="${{ matrix.opam-root }}"/dkml/.opam-switch/build/$COMPONENT.2.1.0.msys2.12
          if [ -e $b ]; then
            if [ -x /usr/bin/tree ]; then
              tree -F $b
            else
              ls -R $b
            fi
          fi

          exit $ec


      # Bundle up single-arch asset

      - name: Bundle up single-ABI asset
        run: |
          #!/bin/sh
          set -eufx
          install -d dist
          share=$(opamrun var ${{env.COMPONENT}}:share)
          opamrun exec -- sh -xc "tar cvCfz '$share' dist/${{matrix.host_target_abis}}.tar.gz ."

      # Upload

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.host_target_abis }}
          path: dist/${{ matrix.host_target_abis }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs:
      - build-dkml
    env:
      COMPONENT: dkml-component-staging-opam
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Remove unneeded artifacts
        run: rm -rf setup-*
        working-directory: dist

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Restructure multi-ABI files
        run: |
          _asset="$(pwd)/_asset"
          install -d "$_asset"

          cd dist
          find . -mindepth 1 -maxdepth 1 -type d | while read -r distname; do
            tar xvCfz "$_asset" $distname/$distname.tar.gz
            rm -f $distname/$distname.tar.gz
          done

      - name: Display restructured files
        run: ls -R
        working-directory: _asset

      - name: Bundle up multi-ABI asset
        run:  tar cvCfz _asset $GITHUB_WORKSPACE/$COMPONENT.tar.gz .

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.COMPONENT }}.tar.gz
